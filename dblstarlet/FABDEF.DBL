;;*****************************************************************************
;;
;; Title:       $FABDEF.DBL
;;
;; Type:        Include file
;;
;; Description: File access block (fab) definitions
;;
;;*****************************************************************************
;;
;; Copyright (c) 2017, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

.ifndef FABDEF_LOADED
.define FABDEF_LOADED %x("0")

;                                                         
;   the fields thru ctx must not be modified due to       
;   commonality between fab/rab/xab                       
;                                                         
.define FAB$C_BID 3                     ; code for fab    
.define FAB$M_PPF_RAT %x("3FC0")
.define FAB$M_PPF_IND %x("4000")
.define FAB$M_PPIFI %x("8000")
.define FAB$M_ASY %x("1")
.define FAB$M_MXV %x("2")
.define FAB$M_SUP %x("4")
.define FAB$M_TMP %x("8")
.define FAB$M_TMD %x("10")
.define FAB$M_DFW %x("20")
.define FAB$M_SQO %x("40")
.define FAB$M_RWO %x("80")
.define FAB$M_POS %x("100")
.define FAB$M_WCK %x("200")
.define FAB$M_NEF %x("400")
.define FAB$M_RWC %x("800")
.define FAB$M_DMO %x("1000")
.define FAB$M_SPL %x("2000")
.define FAB$M_SCF %x("4000")
.define FAB$M_DLT %x("8000")
.define FAB$M_NFS %x("10000")
.define FAB$M_UFO %x("20000")
.define FAB$M_PPF %x("40000")
.define FAB$M_INP %x("80000")
.define FAB$M_CTG %x("100000")
.define FAB$M_CBT %x("200000")
.define FAB$M_SYNCSTS %x("400000")
.define FAB$M_RCK %x("800000")
.define FAB$M_NAM %x("1000000")
.define FAB$M_CIF %x("2000000")
.define FAB$M_ESC %x("8000000")
.define FAB$M_TEF %x("10000000")
.define FAB$M_OFP %x("20000000")
.define FAB$M_KFO %x("40000000")
.define FAB$M_PUT %x("1")
.define FAB$M_GET %x("2")
.define FAB$M_DEL %x("4")
.define FAB$M_UPD %x("8")
.define FAB$M_TRN %x("10")
.define FAB$M_BIO %x("20")
.define FAB$M_BRO %x("40")
.define FAB$M_EXE %x("80")
.define FAB$M_SHRPUT %x("1")
.define FAB$M_SHRGET %x("2")
.define FAB$M_SHRDEL %x("4")
.define FAB$M_SHRUPD %x("8")
.define FAB$M_MSE %x("10")
.define FAB$M_NIL %x("20")
.define FAB$M_UPI %x("40")
.define FAB$M_ORG %x("F0")
.define FAB$C_SEQ 0                     ; sequential
.define FAB$C_REL 16                    ; relative  
.define FAB$C_IDX 32                    ; indexed   
.define FAB$C_HSH 48                    ; hashed    
.define FAB$M_FTN %x("1")
.define FAB$M_CR %x("2")
.define FAB$M_PRN %x("4")
.define FAB$M_BLK %x("8")
.define FAB$M_MSB %x("10")
.define FAB$C_RFM_DFLT 2                ; var len is default            
.define FAB$C_UDF 0                     ; undefined (also stream binary)
.define FAB$C_FIX 1                     ; fixed length records          
.define FAB$C_VAR 2                     ; variable length records       
.define FAB$C_VFC 3                     ; variable fixed control        
.define FAB$C_STM 4                     ; RMS-11 stream (valid only for sequential org)
.define FAB$C_STMLF 5                   ; LF stream (valid only for sequential org)
.define FAB$C_STMCR 6                   ; CR stream (valid only for sequential org)
.define FAB$C_MAXRFM 6                  ; maximum rfm supported
.define FAB$M_ONLY_RU %x("1")
.define FAB$M_RU %x("2")
.define FAB$M_BI %x("4")
.define FAB$M_AI %x("8")
.define FAB$M_AT %x("10")
.define FAB$M_NEVER_RU %x("20")
.define FAB$M_JOURNAL_FILE %x("40")
.define FAB$M_RCF_RU %x("1")
.define FAB$M_RCF_AI %x("2")
.define FAB$M_RCF_BI %x("4")
.define FAB$K_BLN 80                    ; length of fab              
.define FAB$C_BLN 80                    ; length of fab    
.ifdef FABSTRUCT
.ifdef dblnet
import System.Runtime.InteropServices
{StructLayout(LayoutKind.Explicit)}
.endc
CLS structure fabdef
.else
record fabdef
.endc
    fab$b_bid				,byte	; block id                      
    fab$b_bln				,byte	; block len                     
    fab$w_ifi				,short	; internal file index           
    fab$l_fop				,int	; file options                  
    fab$l_sts				,int	; status                        
    fab$l_stv				,int	; status value                  
    fab$l_alq				,int	; allocation quantity           
    fab$w_deq				,short	; default allocation quantity   
    fab$b_fac				,byte	; file access                   
    fab$b_shr				,byte	; file sharing                  
    fab$l_ctx				,int	; user context                  
    fab$b_rtv				,byte	; retrieval window size         
    fab$b_org				,byte	; file organization             
    fab$b_rat				,byte	; record format                 
    fab$b_rfm				,byte	; record format                 
    fab$l_jnl				,int
		fab$b_journal		,byte@fab$l_jnl	; journaling options (from FH2$B_JOURNAL)
		fab$b_ru_facility	,byte@fab$l_jnl+1	; recoverable facility id number
		fabdef$$_fill_7		,short@fab$l_jnl+2; (spare)                       
    fab$l_xab_ptr			,d_addr	; xab address               
    fab$l_nam_ptr			,d_addr
    fab$l_fna_ptr			,d_addr	; file name string address  
    fab$l_dna_ptr			,d_addr	; default file name string addr
    fab$b_fns				,byte	; file name string size           
    fab$b_dns				,byte	; default name string size        
    fab$w_mrs				,short	; maximum record size             
    fab$l_mrn				,int	; maximum record number           
    fab$w_bls				,short	; blocksize for tape              
    fab$b_bks				,byte	; bucket size                     
    fab$b_fsz				,byte	; fixed header size               
    fab$l_dev				,int	; device characteristics          
    fab$l_sdc				,int	; spooling device characteristics 
    fab$w_gbc				,short	; Global buffer count             
    fab$b_acmodes			,byte	; agent access modes              
                          ; recovery control flags           
    fab$b_rcf				,byte	; (only for use by RMS Recovery)  
    fabdef$$_fill_9			,int	; (spare)     
.if ^defined(dblnet) && D_ADDRSIZE == 8
    fabdef$$_fill_10			,int	; (spare) fill to 64 bit boundary 
.endc
.ifdef FABSTRUCT
endstruct
 .else
endrecord
.endc
; These are traditional macros that should be hand-maintained for compatibility 
.define FAB$S_PPF_RAT	8
.define FAB$S_ORG	4
.define fab$b_dsbmsk	fab$b_acmodes	; saved for backwards compatibility 
.define FAB$S_LNM_MODE	2		; logical names 
.define FAB$S_CHAN_MODE	2		; channel 
.define FAB$S_FILE_MODE	2		; files accessability 
; The following defines were scrambled before VAX C V3.1 
.define FAB fabdef
.define fab$l_jnl_real_stuff fab$r_jnl_real_stuff
.ifdef D_VMS
record
	cc$rms_fab	,d_addr, ^xtrnl(decc$ga_rms_fab)
.endc 
.endc ; FABDEF_LOADED ;
