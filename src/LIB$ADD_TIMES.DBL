;;*****************************************************************************
;;
;; Title:       LIB$ADD_TIMES.DBL
;;
;; Type:        Function
;;
;; Description: Emulates the functionality of the OpemVMS routine %LIB$ADD_TIMES
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2014, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

;;; <summary>
;;; 
;;; </summary>
function LIB$ADD_TIMES,		^val
	required in  %ref(firstTime),		long
	required in  %ref(secondTime),		long
	required out %ref(resultingTime),	long
	endparams

	.include "DBLSTARLET:$LIBDEF.DBL"

	record localData
		returnDelta	,boolean
		time1		,i8
		time2		,i8
	endrecord

proc
	init localData
	clear resultingTime

	;One of firstTime or secondTime MUST be a delta time
	if (firstTime .gt. 0 .and. secondTime .gt. 0)
		freturn LIB$_ONEDELTIM

	;populate local variables
	time1 = firstTime
	time2 = secondTime

	; if any of the incoming values are delta time - convert to positive for calculation
	if(time1 .lt. 0) then
	begin
		time1 = time1*-1

		if (time2 .lt. 0)
		begin
			time2 = time2*-1
			returnDelta = true		;both times were delta - set flag
		end
	end
	else
		if(time2 .lt. 0) 
			time2 = time2*-1

	; if delta value - set to negative, else return absolute time
	if (returnDelta) then
			resultingTime = (time1 + time2)*-1
	else
			resultingTime = time1 + time2

	freturn LIB$_NORMAL
endfunction

