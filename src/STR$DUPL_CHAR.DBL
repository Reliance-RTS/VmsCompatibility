;;*****************************************************************************
;;
;; Title:       str$dupl_character
;;
;; Type:        Function
;;
;; Description: Emulates the functionality of the OpemVMS routine str$dupl_character
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2017, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************


;;; <summary>
;;; 
;;; </summary>
;;; <param name="destination"></param>
;;; <param name="count"></param>
;;; <param name="character"></param>
;;; <returns></returns>
function str$dupl_char,	^val
	required out  destination	,a
.ifdef dblnet
	in  ^ref(count)			,int	;pass ^szie(1starg)
	in  ^ref(character)		,byte	;pass space if no argument
.else
	optional in  ^ref(count)	,int

	opt  in  ^ref(character)	,byte
.endc
	record 
		counter	,i4
		max		,i4
		mychar,	a1
.include "DBLSTARLET:$SSDEF.DBL"
proc
.ifndef dblnet
	if !^passed(count) then
		max = 1
	else
.endc
		max = count
.ifndef dblnet
	if !^passed(character) then
		clear mychar
	else
.endc
	clear mychar
	mychar = %char(character)
	if  max > ^size(destination) 
		max = ^size(destination)
	xcall fill(mychar, destination(1:max))

	freturn SS$_NORMAL

end
