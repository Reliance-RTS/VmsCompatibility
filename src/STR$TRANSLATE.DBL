;;*****************************************************************************
;;
;; Title:       STR$TRANSLATE
;;
;; Type:        Function
;;
;; Description: Emulates the functionality of the OpemVMS routine STR$TRANSLATE
;;
;; Author:      Allan Shikhvarg, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2014, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

;;; <summary>
;;;	Translate matched characters from source string
;;; </summary>
;;; <param name="destinationString">Returned translated value</param>
;;; <param name="sourceString">String to be translated</param>
;;; <param name="translationString">String containg the values to translate to</param>
;;; <param name="matchString">Match string for the incoming characters</param>
;;; <returns>
;;;	SS$_NORMAL
;;;	STR$_TRU - The returned translation has been truncated (size of destination argument is smaller than the source string)
;;; </returns>
function STR$TRANSLATE, ^val
	required out destinationString	,a
	required in  sourceString		,a
	required in  translationString	,a
	required in  matchString		,a
	endparams

	.include "DBLSTARLET:$SSDEF.DBL"
	.include "DBLSTARLET:$STRDEF.DBL"

	.align
	record lVars
		i			,i4
		i2			,i4
		destSize	,i4
		sourceLen	,i4
		transLen	,i4
	endrecord

proc
	;initialize
	clear destinationString
	init lVars

	;get lengths of all strings
	destSize	= ^size(destinationString)
	sourceLen	= ^size(sourceString)
	transLen	= ^size(translationString)

	;loop through the source string looking for a match of each character in match string
	for i from 1 thru sourceLen by 1
	begin
		;if source string is larger than destination string - return translated value obtained thus far and signal Truncation Warning
		if (i .gt. destSize)
			freturn STR$_TRU
		
		i2 = %instr(1, matchString, sourceString(i:1))

		using i2 select
		(0)					,destinationString(i:1) = sourceString(i:1)			;match not found - use character from source string
		(.le. transLen)		,destinationString(i:1) = translationString(i2:1)	;use translate string character
		()					,destinationString(i:1) = " "						;matching character is outside translate string - use space
		endusing
	end

	;If we got here, all is well
	freturn SS$_NORMAL
endfunction

					
