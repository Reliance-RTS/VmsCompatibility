;;*****************************************************************************
;;
;; Title:       LIB$SPAWN
;;
;; Type:        Function
;;
;; Description: Emulates the functionality of the OpemVMS routine LIB$SPAWN
;;
;; Author:      Allan Shikhvarg, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2014, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

;;; <summary>
;;; Requests the command language interpreter (CLI) of the calling process to spawn a subprocess  
;;; </summary>
;;; <param name="commandString"></param>
;;; <param name="inputFile"></param>
;;; <param name="outputFile"></param>
;;; <param name="flags"></param>
;;; <param name="processName"></param>
;;; <param name="processID"></param>
;;; <param name="lStatus"></param>
;;; <param name="flagNum"></param>
;;; <param name="astadr"></param>
;;; <param name="astparm"></param>
;;; <param name="promptString"></param>
;;; <param name="cliSpec"></param>
;;; <param name="tableSpec"></param>
;;; <returns></returns>
function LIB$SPAWN		    ,^val
	optional in  commandString	,a
	optional in  inputFile      ,a			;NOT APPLICABLE
	optional in  outputFile     ,a			;NOT APPLICABLE
	optional in  %ref(flags)    ,i4			;NOT APPLICABLE
	optional in  processName    ,a			;NOT APPLICABLE
	optional out %ref(processID) ,i4			;NOT APPLICABLE
	%val(lStatus)			,i			;NOT APPLICABLE
	optional in  %ref(flagNum)	,i1			;NOT APPLICABLE
	optional in  ^val(astadr)	,i			;NOT APPLICABLE		;procedure value? } this was declared as i in the VMSSystem stub
	optional in  astparm		,n			;NOT APPLICABLE
	optional in  promptString   ,a			;NOT APPLICABLE
	optional in  cliSpec		,a			;NOT APPLICABLE
	optional in  tableSpec      ,a			;NOT APPLICABLE
	endparams

	.include "DBLSTARLET:$SSDEF.DBL"
			

proc
	;initialize
	if ^passed(processID)
		clear processID

	if ^passed(commandString)
		xcall spawn(commandString)
.ifdef TODO
	; lstatus is the address of a variable of size D_ADDR 
	if lStatus
		nop; update the status as if this was an int*
.endc
	freturn SS$_NORMAL
endfunction

					
